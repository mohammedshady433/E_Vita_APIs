// <auto-generated />
using System;
using E_Vita_APIs;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_Vita_APIs.Migrations
{
    [DbContext(typeof(DBcontext))]
    partial class DBcontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("E_Vita_APIs.Models.Appointment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("Cancelation_Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<TimeOnly>("End")
                        .HasColumnType("time(6)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Service_Type")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("Start")
                        .HasColumnType("time(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Assigned", b =>
                {
                    b.Property<string>("NurseID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoomID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoomsID")
                        .HasColumnType("varchar(255)");

                    b.HasKey("NurseID", "RoomID");

                    b.HasIndex("RoomsID");

                    b.ToTable("Assigneds");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Attendance", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("varchar(255)");

                    b.Property<TimeOnly>("Attend_Time")
                        .HasColumnType("time(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeOnly>("Leave_Time")
                        .HasColumnType("time(6)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Beds", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("BedType")
                        .HasColumnType("int");

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Beds");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Days", b =>
                {
                    b.Property<string>("Days_ID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Days_ID");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.FamilyHistory", b =>
                {
                    b.Property<string>("Fam_ID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PatientHistoryID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Relation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Fam_ID");

                    b.HasIndex("PatientHistoryID");

                    b.ToTable("FamilyHistories");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Finance", b =>
                {
                    b.Property<string>("Finance_ID")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Appointment_Income")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Appointment_Outcome")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("RoomReservation_Income")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("RoomReservation_Outcome")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Salaries")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Finance_ID");

                    b.ToTable("Finances");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Lab", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("Labs");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Medication", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Active_site")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PrescriptionID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("PrescriptionID");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Patient", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Finance_ID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nationality")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("Finance_ID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.PatientCareEquipment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BedId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Date_of_Adding")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BedId");

                    b.ToTable("PatientCareEquipments");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.PatientHistory", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Disease")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("surgery")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("PatientId");

                    b.ToTable("patientHistories");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Prescription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Complaint")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Doctor_ID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Patient_ID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Reason_for_visit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Doctor_ID");

                    b.HasIndex("Patient_ID");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Radiology", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Examination_Type")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Radiologies");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Rooms", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("availablity")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Schedule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Days_ID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time(6)");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time(6)");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Days_ID");

                    b.HasIndex("User_Id");

                    b.ToTable("scheduales");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.ScreentimeArticle", b =>
                {
                    b.Property<string>("Chat_ID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Articles")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time(6)");

                    b.HasKey("Chat_ID");

                    b.ToTable("ScreentimeArticle");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Share", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NoteId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NurseId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ReceptionistId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("DoctorId");

                    b.HasIndex("NoteId");

                    b.HasIndex("NurseId");

                    b.HasIndex("ReceptionistId");

                    b.ToTable("Shares");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.SharedNote", b =>
                {
                    b.Property<string>("Note_ID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("practitionerID")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("practitioner_type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Note_ID");

                    b.ToTable("SharedNotes");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.User", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nationalality")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("degree")
                        .HasColumnType("longtext");

                    b.Property<int?>("years_of_experience")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("E_Vita_APIs.Models.WardRound", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DoctorID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time(6)");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorID");

                    b.ToTable("WardRounds");
                });

            modelBuilder.Entity("LabPrescription", b =>
                {
                    b.Property<string>("LabsID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PrescriptionsId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("LabsID", "PrescriptionsId");

                    b.HasIndex("PrescriptionsId");

                    b.ToTable("LabPrescription");
                });

            modelBuilder.Entity("PatientWardRound", b =>
                {
                    b.Property<string>("PatientsID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("wardRoundsId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("PatientsID", "wardRoundsId");

                    b.HasIndex("wardRoundsId");

                    b.ToTable("PatientWardRound");
                });

            modelBuilder.Entity("PrescriptionRadiology", b =>
                {
                    b.Property<string>("PrescriptionsId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RadiologiesId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("PrescriptionsId", "RadiologiesId");

                    b.HasIndex("RadiologiesId");

                    b.ToTable("PrescriptionRadiology");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Accountant", b =>
                {
                    b.HasBaseType("E_Vita_APIs.Models.User");

                    b.Property<string>("Finance_ID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasIndex("Finance_ID");

                    b.ToTable("Users", t =>
                        {
                            t.Property("Rank")
                                .HasColumnName("Accountant_Rank");
                        });

                    b.HasDiscriminator().HasValue("Accountant");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Doctor", b =>
                {
                    b.HasBaseType("E_Vita_APIs.Models.User");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Screentime")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasIndex("Screentime");

                    b.ToTable("Users", t =>
                        {
                            t.Property("Rank")
                                .HasColumnName("Doctor_Rank");

                            t.Property("Speciality")
                                .HasColumnName("Doctor_Speciality");
                        });

                    b.HasDiscriminator().HasValue("Doctor");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Lab_technician", b =>
                {
                    b.HasBaseType("E_Vita_APIs.Models.User");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("Users", t =>
                        {
                            t.Property("Department")
                                .HasColumnName("Lab_technician_Department");
                        });

                    b.HasDiscriminator().HasValue("Lab_technician");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Nurse", b =>
                {
                    b.HasBaseType("E_Vita_APIs.Models.User");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Nurse");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Rad_technician", b =>
                {
                    b.HasBaseType("E_Vita_APIs.Models.User");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Rad_technician");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Receptionist", b =>
                {
                    b.HasBaseType("E_Vita_APIs.Models.User");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Receptionist");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Appointment", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Vita_APIs.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Assigned", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Nurse", "User")
                        .WithMany()
                        .HasForeignKey("NurseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Vita_APIs.Models.Rooms", "Rooms")
                        .WithMany()
                        .HasForeignKey("RoomsID");

                    b.Navigation("Rooms");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Attendance", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Beds", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Rooms", "room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("room");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.FamilyHistory", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.PatientHistory", "PatientHistory")
                        .WithMany()
                        .HasForeignKey("PatientHistoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientHistory");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Medication", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Vita_APIs.Models.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Patient", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Finance", "finance")
                        .WithMany("Patients")
                        .HasForeignKey("Finance_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("finance");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.PatientCareEquipment", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Beds", "Bed")
                        .WithMany()
                        .HasForeignKey("BedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bed");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.PatientHistory", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Patient", "patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patient");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Prescription", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("Doctor_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Vita_APIs.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("Patient_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Schedule", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Days", "Days")
                        .WithMany("Schedules")
                        .HasForeignKey("Days_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Vita_APIs.Models.User", "User_ID")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Days");

                    b.Navigation("User_ID");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Share", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Vita_APIs.Models.SharedNote", "Note")
                        .WithMany()
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Vita_APIs.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Vita_APIs.Models.Receptionist", "Receptionist")
                        .WithMany()
                        .HasForeignKey("ReceptionistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Note");

                    b.Navigation("Nurse");

                    b.Navigation("Receptionist");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.WardRound", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("LabPrescription", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Lab", null)
                        .WithMany()
                        .HasForeignKey("LabsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Vita_APIs.Models.Prescription", null)
                        .WithMany()
                        .HasForeignKey("PrescriptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PatientWardRound", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Vita_APIs.Models.WardRound", null)
                        .WithMany()
                        .HasForeignKey("wardRoundsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrescriptionRadiology", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Prescription", null)
                        .WithMany()
                        .HasForeignKey("PrescriptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Vita_APIs.Models.Radiology", null)
                        .WithMany()
                        .HasForeignKey("RadiologiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Accountant", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Finance", "finance")
                        .WithMany("Accountants")
                        .HasForeignKey("Finance_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("finance");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Doctor", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.ScreentimeArticle", "screentime")
                        .WithMany()
                        .HasForeignKey("Screentime");

                    b.Navigation("screentime");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Days", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Finance", b =>
                {
                    b.Navigation("Accountants");

                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
