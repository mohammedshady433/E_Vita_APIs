// <auto-generated />
using System;
using E_Vita_APIs;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_Vita_APIs.Migrations
{
    [DbContext(typeof(DBcontext))]
    [Migration("20250525011806_SharedNote")]
    partial class SharedNote
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("E_Vita_APIs.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Actor")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Cancelation_Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Cancelation_Reason")
                        .HasColumnType("longtext");

                    b.Property<TimeOnly>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Service_Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.AppointmentPractitioner", b =>
                {
                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("PractitionersId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId", "PractitionersId");

                    b.HasIndex("PractitionersId");

                    b.ToTable("AppointmentPractitioners");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Bed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Beds");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Contact_fam", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PatientId");

                    b.ToTable("Contact_Fams");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Discharge", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DischargeType")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeOnly>("When")
                        .HasColumnType("time(6)");

                    b.HasKey("PatientId");

                    b.ToTable("Discharges");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Encounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PractitionerID")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("PractitionerID");

                    b.ToTable("Encounters");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.FamHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Disease")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PractitionerID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PatientId");

                    b.HasIndex("PractitionerID");

                    b.ToTable("FamHistories");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Financial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<float>("Paid_Amount")
                        .HasColumnType("float");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Payment_Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Financials");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Lab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LabType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("longblob");

                    b.HasKey("Id");

                    b.ToTable("Labs");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActiveIngrediant")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Dose")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MedID")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Medication_name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PractitionerID")
                        .HasColumnType("int");

                    b.Property<int?>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("PractitionerID");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Observation_Vital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("observation_Vitals");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Operation_Room", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RoomStatus")
                        .HasColumnType("int");

                    b.HasKey("RoomId");

                    b.ToTable("Operation_Rooms");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Patient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nationality")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("WardRoundId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("WardRoundId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Practitioner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Practitioners");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Practitioner_Role", b =>
                {
                    b.Property<int>("PractitionerId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(6)");

                    b.Property<int>("Service")
                        .HasColumnType("int");

                    b.Property<int>("Specialty")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(6)");

                    b.HasKey("PractitionerId");

                    b.ToTable("Practitioners_Role");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Diseases")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Examination")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LabTest")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("LabtestId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PractitionerID")
                        .HasColumnType("int");

                    b.Property<string>("RadiologyTest")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReasonForVisit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Reserve")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Surgery")
                        .HasColumnType("longtext");

                    b.Property<string>("familyHistory")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("patientcomplaint")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("LabtestId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PractitionerID");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Quantity", b =>
                {
                    b.Property<int>("Observation_VitalsId")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("Value")
                        .HasColumnType("float");

                    b.HasKey("Observation_VitalsId");

                    b.ToTable("Quantities");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Radiology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("longblob");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Radiologies");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Results", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ResultId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LabId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Range")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TestComponent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ResultId");

                    b.HasIndex("LabId");

                    b.HasIndex("PatientId");

                    b.ToTable("Result");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Room", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("BedId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NurseId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<int>("availablity")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BedId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Scheduale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("Service_Type")
                        .HasColumnType("int");

                    b.Property<int>("speciality")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("scheduales");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.SharedNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PractitionerID")
                        .HasColumnType("int");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PractitionerID");

                    b.ToTable("SharedNotes");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.WardRound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PractitionerID")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.HasIndex("PractitionerID");

                    b.ToTable("WardRounds");
                });

            modelBuilder.Entity("Operation_RoomPractitioner", b =>
                {
                    b.Property<int>("PractitionersId")
                        .HasColumnType("int");

                    b.Property<int>("operation_RoomsRoomId")
                        .HasColumnType("int");

                    b.HasKey("PractitionersId", "operation_RoomsRoomId");

                    b.HasIndex("operation_RoomsRoomId");

                    b.ToTable("Operation_RoomPractitioner");
                });

            modelBuilder.Entity("PatientPractitioner", b =>
                {
                    b.Property<int>("PatientsID")
                        .HasColumnType("int");

                    b.Property<int>("PractitionersId")
                        .HasColumnType("int");

                    b.HasKey("PatientsID", "PractitionersId");

                    b.HasIndex("PractitionersId");

                    b.ToTable("PatientPractitioner");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Appointment", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.AppointmentPractitioner", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Appointment", "Appointment")
                        .WithMany("AppointmentPractitioners")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Vita_APIs.Models.Practitioner", "Practitioner")
                        .WithMany("AppointmentPractitioners")
                        .HasForeignKey("PractitionersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Practitioner");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Contact_fam", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Discharge", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Encounter", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Vita_APIs.Models.Practitioner", "Practitioner")
                        .WithMany()
                        .HasForeignKey("PractitionerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Practitioner");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.FamHistory", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Vita_APIs.Models.Practitioner", "Practitioner")
                        .WithMany()
                        .HasForeignKey("PractitionerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Practitioner");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Financial", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Medication", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Vita_APIs.Models.Practitioner", "Practitioner")
                        .WithMany()
                        .HasForeignKey("PractitionerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Vita_APIs.Models.Prescription", "Prescription")
                        .WithMany("Medications")
                        .HasForeignKey("PrescriptionId");

                    b.Navigation("Patient");

                    b.Navigation("Practitioner");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Operation_Room", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Patient", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.WardRound", "WardRound")
                        .WithMany()
                        .HasForeignKey("WardRoundId");

                    b.Navigation("WardRound");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Practitioner_Role", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Practitioner", "Practitioner")
                        .WithMany()
                        .HasForeignKey("PractitionerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Practitioner");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Prescription", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Lab", "Labtest")
                        .WithMany()
                        .HasForeignKey("LabtestId");

                    b.HasOne("E_Vita_APIs.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Vita_APIs.Models.Practitioner", "Practitioner")
                        .WithMany()
                        .HasForeignKey("PractitionerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Labtest");

                    b.Navigation("Patient");

                    b.Navigation("Practitioner");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Quantity", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Observation_Vital", "Observation_Vital")
                        .WithMany()
                        .HasForeignKey("Observation_VitalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Observation_Vital");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Radiology", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Results", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Lab", "Lab")
                        .WithMany("Results")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Vita_APIs.Models.Patient", "Patient")
                        .WithMany("Results")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lab");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Room", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Bed", "Bed")
                        .WithMany()
                        .HasForeignKey("BedId");

                    b.HasOne("E_Vita_APIs.Models.Practitioner", "Practitioner")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Vita_APIs.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bed");

                    b.Navigation("Patient");

                    b.Navigation("Practitioner");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Scheduale", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.SharedNote", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Practitioner", "Practitioner")
                        .WithMany()
                        .HasForeignKey("PractitionerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Practitioner");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.WardRound", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Practitioner", "Practitioner")
                        .WithMany()
                        .HasForeignKey("PractitionerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Practitioner");
                });

            modelBuilder.Entity("Operation_RoomPractitioner", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Practitioner", null)
                        .WithMany()
                        .HasForeignKey("PractitionersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Vita_APIs.Models.Operation_Room", null)
                        .WithMany()
                        .HasForeignKey("operation_RoomsRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PatientPractitioner", b =>
                {
                    b.HasOne("E_Vita_APIs.Models.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Vita_APIs.Models.Practitioner", null)
                        .WithMany()
                        .HasForeignKey("PractitionersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Appointment", b =>
                {
                    b.Navigation("AppointmentPractitioners");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Lab", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Patient", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Practitioner", b =>
                {
                    b.Navigation("AppointmentPractitioners");
                });

            modelBuilder.Entity("E_Vita_APIs.Models.Prescription", b =>
                {
                    b.Navigation("Medications");
                });
#pragma warning restore 612, 618
        }
    }
}
